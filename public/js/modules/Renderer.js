/**
 * AVN Player v1.5.0 - Renderer Module
 * by Nftxv
 */
export default class Renderer {
  constructor(canvasId) {
    // ... (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  }
  
  // ... (setData, loadAndRenderAll, loadImages, getSourceUrl –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

  getNodeAt(x, y) { /* ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
  getEdgeAt(x, y) { /* ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }

  // –ù–û–í–´–ô –ú–ï–¢–û–î –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ +/-
  getNodeToggleAt(x, y) {
    const toggleSize = 16;
    for (let i = this.nodes.length - 1; i >= 0; i--) {
        const node = this.nodes[i];
        const toggleX = node.x + 160 - toggleSize / 2 - 5;
        const toggleY = node.y + (node.isCollapsed ? 40 : 90) - toggleSize / 2 - 5;
        const dist = Math.sqrt(Math.pow(x - toggleX, 2) + Math.pow(y - toggleY, 2));
        if (dist < toggleSize / 2) {
            return node;
        }
    }
    return null;
  }
  
  // ... (renderLoop, drawEdge, drawTemporaryEdge –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
  
  // –ù–û–í–´–ô –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
  wrapText(context, text, x, y, maxWidth, lineHeight) {
    const words = text.split(' ');
    let line = '';
    let testLine = '';
    let lineCount = 0;
    
    for (let n = 0; n < words.length; n++) {
      testLine = line + words[n] + ' ';
      const metrics = context.measureText(testLine);
      const testWidth = metrics.width;
      if (testWidth > maxWidth && n > 0) {
        context.fillText(line, x, y);
        line = words[n] + ' ';
        y += lineHeight;
        lineCount++;
      } else {
        line = testLine;
      }
    }
    context.fillText(line, x, y);
    return lineCount + 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
  }

  // –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –ú–ï–¢–û–î –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–æ–¥—ã
  drawNode(node) {
    const ctx = this.ctx;
    const width = 160;
    const collapsedHeight = 40;
    const expandedHeight = 90;
    const iconBarY = 45;
    const iconSize = 16;
    const iconGap = 20;

    const height = node.isCollapsed ? collapsedHeight : expandedHeight;

    ctx.save();
    
    // –°—Ç–∏–ª–∏ –æ–±–≤–æ–¥–∫–∏
    if (node.selected) { /* ... –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ... */ }
    // ...

    ctx.fillStyle = '#2d2d2d'; // –§–æ–Ω –Ω–æ–¥—ã
    ctx.beginPath();
    ctx.roundRect ? ctx.roundRect(node.x, node.y, width, height, 8) : ctx.rect(node.x, node.y, width, height);
    ctx.fill();
    ctx.stroke();

    // --- –û–¢–†–ò–°–û–í–ö–ê –ö–û–ù–¢–ï–ù–¢–ê –í–ù–£–¢–†–ò –ù–û–î–´ ---
    ctx.fillStyle = '#e0e0e0';
    ctx.font = 'bold 14px Segoe UI';

    if (node.isCollapsed) {
      // –í —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
      ctx.textAlign = 'center';
      this.wrapText(ctx, node.title, node.x + width / 2, node.y + 16, width - 10, 16);
      ctx.textAlign = 'left'; // –°–±—Ä–æ—Å
    } else {
      // –í —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      // –û–±–ª–æ–∂–∫–∞
      const coverSource = node.coverSources?.[0];
      const coverUrl = this.graphData.getSourceUrl(coverSource);
      if (coverUrl && this.images[coverUrl]) {
        ctx.drawImage(this.images[coverUrl], node.x + 5, node.y + 5, 35, 35);
      } else {
        ctx.fillStyle = '#444';
        ctx.fillRect(node.x + 5, node.y + 5, 35, 35);
      }

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫
      ctx.fillStyle = '#e0e0e0';
      this.wrapText(ctx, node.title, node.x + 45, node.y + 18, width - 50, 16);

      // –ò–∫–æ–Ω–∫–∏
      let currentIconX = node.x + 10;
      
      // –ò–∫–æ–Ω–∫–∞ Play
      ctx.font = `${iconSize}px Segoe UI Symbol`;
      ctx.fillStyle = '#a0a0a0';
      ctx.fillText('‚ñ∂', currentIconX, node.y + iconBarY + iconSize);
      currentIconX += iconGap;

      // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
      (node.customLinks || []).forEach(link => {
        const icon = this.getIconForUrl(link);
        ctx.fillText(icon, currentIconX, node.y + iconBarY + iconSize);
        currentIconX += iconGap;
      });
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ +/-
    this.drawToggleIcon(ctx, node, width, height);

    ctx.restore();
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏ +/-
  drawToggleIcon(ctx, node, width, height) {
    const toggleSize = 16;
    const x = node.x + width - toggleSize / 2 - 5;
    const y = node.y + height - toggleSize / 2 - 5;
    
    ctx.save();
    ctx.fillStyle = '#4f4f4f';
    ctx.strokeStyle = '#888';
    ctx.lineWidth = 1;

    ctx.beginPath();
    ctx.arc(x, y, toggleSize / 2, 0, Math.PI * 2);
    ctx.fill();
    ctx.stroke();

    ctx.fillStyle = '#e0e0e0';
    ctx.font = 'bold 14px Segoe UI';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(node.isCollapsed ? '+' : '‚àí', x, y + 1);
    
    ctx.restore();
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ URL
  getIconForUrl(url) {
    if (url.includes('youtube.com') || url.includes('youtu.be')) return '‚ñ∂Ô∏è'; // YouTube (—ç–º–æ–¥–∑–∏)
    if (url.includes('spotify.com')) return 'üéµ'; // Spotify (—ç–º–æ–¥–∑–∏)
    if (url.includes('soundcloud.com')) return '‚òÅÔ∏è'; // SoundCloud (—ç–º–æ–¥–∑–∏)
    if (url.includes('twitter.com') || url.includes('x.com')) return 'ùïè'; // X/Twitter
    return 'üîó'; // Generic link
  }

  // ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
}